/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package geni_logiciel_projet1;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.*;


public abstract class App {

    private final static Operativ operativ = new Operativ(0, 6, 0);
    private final static CommandControl command_control = new CommandControl();
    private final static PanelWindow window = new PanelWindow();

    public static void main(String[] args) {
        //Démarrage de la partie opérative
        operativ.start();

        //Appelle de la fenêtre
        SwingUtilities.invokeLater(() -> window.setVisible(true));
    }

    /**
     * Ajoute une destination dans le controlleur de commande à l'aide d'un objet Destination.
     * @param destination
     */
    static void addDestination(Destination destination) {
        command_control.addDestination(destination);
        turnOnButton(command_control.getDestinationOnList());
    }

    /**
     * Ajoute une destination dans le controlleur de commande à l'aide d'un Integer qui indique l'étage.
     * @param destination
     */
    static void addDestination(int destination) {
        command_control.addDestination(destination);
        turnOnButton(command_control.getDestinationOnList());
    }

    /**
     * Met à jour les action de la partie Opérative. Lancée par le controlleur de commande.
     * @param action
     */
    static void updateActionOperativ (int action) {
        operativ.updateAction(action);
    }

    /**
     * Indique l'arrêt au prochain étage à la partie opérative. Lancée par le controlleur de commande.
     */
    static void stopNext() {
        operativ.setStop_nextTrue();
    }

    /**
     * Met à jour de l'état dans le controlleur de commande et vérifie pour supprimer l'action finis de la liste. Lancée en réaction à la partie opérative.
     * @param state
     */
    static void updateStateCommand (int state) {
        command_control.setState(state);
        if (command_control.checkForUnloading()) {
            command_control.deleteLastDestination();
            turnOnButton(command_control.getDestinationOnList());
            command_control.updateActionOperativ();
        }
    }

    /**
     * Met à jour de l'étage dans le controlleur de commande et vérifie pour activer l'arrêt au prochain étage. Lancée en réaction à la partie opérative.
     * @param floor
     */
    static void updateFloorCommand (int floor) {
        command_control.setCurrent_floor(floor);
        command_control.checkForStopNext();
    }

    /**
     * Met à jour de l'état dans la GUI. Lancée en réaction à la partie opérative.
     * @param state
     */
    static void updateStatePanel (int state) {
        window.updateLabelState(state);
    }

    /**
     * Met à jour de l'étage dans la GUI. Lancée en réaction à la partie opérative.
     * @param floor
     */
    static void updateFloorPanel (int floor) {
        window.updateLabelFloor(floor);
    }

    /**
     * Appelle de fonctions afin de mettre à jour l'étage dans le controlleur de commande et la GUI.
     * @param floor
     */
    static void updateFloor (int floor) {
        updateFloorCommand(floor);
        updateFloorPanel(floor);
    }

    /**
     * Appelle de fonctions afin de mettre à jour l'état dans le controlleur de commande et la GUI.
     * @param state
     */
    static void updateState (int state) {
        updateStateCommand(state);
        updateStatePanel(state);
    }

    /**
     * Interromp le Thread de Operativ et stop la GUI. Lancée par le controlleur de commande.
     */
    public static void emergencyStop() {
        operativ.interrupt();
        window.setEmegercy_stopTrue();
    }

    /**
     * Met à jour le Label d'état de la GUI quand il y a coupure d'urgence.
     */
    public static void setStateEmergencyStoped() {
        window.updateLabelState(Constante.State.EMERGENCY_STOP);
    }

    /**
     * A l'aide d'une liste de destination, indiquer à la GUI qu'elle dois se allumer les boutons de la liste. Lancée par le controlleur de commande.
     * @param listDestination
     */
    public static void turnOnButton(ArrayList<Integer> listDestination) {
        window.resetAllButton();
        window.turnOnButton(listDestination);
    }
}

